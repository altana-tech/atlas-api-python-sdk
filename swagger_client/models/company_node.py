# coding: utf-8

"""
    Altana Atlas API

    Altana Atlas for Regulatory Risk and Trade Compliance  # noqa: E501

    OpenAPI spec version: v2.0.0-8
    Contact: engineering@altanatech.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.base_node import BaseNode  # noqa: F401,E501

class CompanyNode(BaseNode):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'company_canon_id': 'str',
        'company_name': 'str',
        'company_variant_list': 'list[str]',
        'has_restrictions': 'bool',
        'number_of_shipments': 'int',
        'restrictions': 'list[Restriction]',
        'sources': 'list[str]'
    }
    if hasattr(BaseNode, "swagger_types"):
        swagger_types.update(BaseNode.swagger_types)

    attribute_map = {
        'company_canon_id': 'company_canon_id',
        'company_name': 'company_name',
        'company_variant_list': 'company_variant_list',
        'has_restrictions': 'has_restrictions',
        'number_of_shipments': 'number_of_shipments',
        'restrictions': 'restrictions',
        'sources': 'sources'
    }
    if hasattr(BaseNode, "attribute_map"):
        attribute_map.update(BaseNode.attribute_map)

    def __init__(self, company_canon_id=None, company_name=None, company_variant_list=None, has_restrictions=None, number_of_shipments=None, restrictions=None, sources=None, *args, **kwargs):  # noqa: E501
        """CompanyNode - a model defined in Swagger"""  # noqa: E501
        self._company_canon_id = None
        self._company_name = None
        self._company_variant_list = None
        self._has_restrictions = None
        self._number_of_shipments = None
        self._restrictions = None
        self._sources = None
        self.discriminator = None
        if company_canon_id is not None:
            self.company_canon_id = company_canon_id
        if company_name is not None:
            self.company_name = company_name
        if company_variant_list is not None:
            self.company_variant_list = company_variant_list
        if has_restrictions is not None:
            self.has_restrictions = has_restrictions
        if number_of_shipments is not None:
            self.number_of_shipments = number_of_shipments
        if restrictions is not None:
            self.restrictions = restrictions
        if sources is not None:
            self.sources = sources
        BaseNode.__init__(self, *args, **kwargs)

    @property
    def company_canon_id(self):
        """Gets the company_canon_id of this CompanyNode.  # noqa: E501

        A unique identifier for a company node  # noqa: E501

        :return: The company_canon_id of this CompanyNode.  # noqa: E501
        :rtype: str
        """
        return self._company_canon_id

    @company_canon_id.setter
    def company_canon_id(self, company_canon_id):
        """Sets the company_canon_id of this CompanyNode.

        A unique identifier for a company node  # noqa: E501

        :param company_canon_id: The company_canon_id of this CompanyNode.  # noqa: E501
        :type: str
        """

        self._company_canon_id = company_canon_id

    @property
    def company_name(self):
        """Gets the company_name of this CompanyNode.  # noqa: E501

        The canonical company name represented by the node  # noqa: E501

        :return: The company_name of this CompanyNode.  # noqa: E501
        :rtype: str
        """
        return self._company_name

    @company_name.setter
    def company_name(self, company_name):
        """Sets the company_name of this CompanyNode.

        The canonical company name represented by the node  # noqa: E501

        :param company_name: The company_name of this CompanyNode.  # noqa: E501
        :type: str
        """

        self._company_name = company_name

    @property
    def company_variant_list(self):
        """Gets the company_variant_list of this CompanyNode.  # noqa: E501

        A list of other names used by the company as generated by the Altana named entity recognition serivce  # noqa: E501

        :return: The company_variant_list of this CompanyNode.  # noqa: E501
        :rtype: list[str]
        """
        return self._company_variant_list

    @company_variant_list.setter
    def company_variant_list(self, company_variant_list):
        """Sets the company_variant_list of this CompanyNode.

        A list of other names used by the company as generated by the Altana named entity recognition serivce  # noqa: E501

        :param company_variant_list: The company_variant_list of this CompanyNode.  # noqa: E501
        :type: list[str]
        """

        self._company_variant_list = company_variant_list

    @property
    def has_restrictions(self):
        """Gets the has_restrictions of this CompanyNode.  # noqa: E501

        Whether of not the company has restrictions imposed on it  # noqa: E501

        :return: The has_restrictions of this CompanyNode.  # noqa: E501
        :rtype: bool
        """
        return self._has_restrictions

    @has_restrictions.setter
    def has_restrictions(self, has_restrictions):
        """Sets the has_restrictions of this CompanyNode.

        Whether of not the company has restrictions imposed on it  # noqa: E501

        :param has_restrictions: The has_restrictions of this CompanyNode.  # noqa: E501
        :type: bool
        """

        self._has_restrictions = has_restrictions

    @property
    def number_of_shipments(self):
        """Gets the number_of_shipments of this CompanyNode.  # noqa: E501

        The number of shipments  # noqa: E501

        :return: The number_of_shipments of this CompanyNode.  # noqa: E501
        :rtype: int
        """
        return self._number_of_shipments

    @number_of_shipments.setter
    def number_of_shipments(self, number_of_shipments):
        """Sets the number_of_shipments of this CompanyNode.

        The number of shipments  # noqa: E501

        :param number_of_shipments: The number_of_shipments of this CompanyNode.  # noqa: E501
        :type: int
        """

        self._number_of_shipments = number_of_shipments

    @property
    def restrictions(self):
        """Gets the restrictions of this CompanyNode.  # noqa: E501

        A list of dictionaries containing the type of restriction, a description and the severity  # noqa: E501

        :return: The restrictions of this CompanyNode.  # noqa: E501
        :rtype: list[Restriction]
        """
        return self._restrictions

    @restrictions.setter
    def restrictions(self, restrictions):
        """Sets the restrictions of this CompanyNode.

        A list of dictionaries containing the type of restriction, a description and the severity  # noqa: E501

        :param restrictions: The restrictions of this CompanyNode.  # noqa: E501
        :type: list[Restriction]
        """

        self._restrictions = restrictions

    @property
    def sources(self):
        """Gets the sources of this CompanyNode.  # noqa: E501

        A list of data sources for the information  # noqa: E501

        :return: The sources of this CompanyNode.  # noqa: E501
        :rtype: list[str]
        """
        return self._sources

    @sources.setter
    def sources(self, sources):
        """Sets the sources of this CompanyNode.

        A list of data sources for the information  # noqa: E501

        :param sources: The sources of this CompanyNode.  # noqa: E501
        :type: list[str]
        """

        self._sources = sources

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CompanyNode, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CompanyNode):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
