# coding: utf-8

"""
    Altana Atlas API

    Altana Atlas for Regulatory Risk and Trade Compliance  # noqa: E501

    OpenAPI spec version: {{ version or \"v0.0.1\" }}
    Contact: engineering@altanatech.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DeclaredGoods(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'hs_code': 'str',
        'goods_description': 'str',
        'value': 'float',
        'currency': 'str'
    }

    attribute_map = {
        'hs_code': 'hs_code',
        'goods_description': 'goods_description',
        'value': 'value',
        'currency': 'currency'
    }

    def __init__(self, hs_code=None, goods_description=None, value=None, currency=None):  # noqa: E501
        """DeclaredGoods - a model defined in Swagger"""  # noqa: E501
        self._hs_code = None
        self._goods_description = None
        self._value = None
        self._currency = None
        self.discriminator = None
        self.hs_code = hs_code
        self.goods_description = goods_description
        self.value = value
        self.currency = currency

    @property
    def hs_code(self):
        """Gets the hs_code of this DeclaredGoods.  # noqa: E501

        Text of the HS6 (or highest available HS level) code  # noqa: E501

        :return: The hs_code of this DeclaredGoods.  # noqa: E501
        :rtype: str
        """
        return self._hs_code

    @hs_code.setter
    def hs_code(self, hs_code):
        """Sets the hs_code of this DeclaredGoods.

        Text of the HS6 (or highest available HS level) code  # noqa: E501

        :param hs_code: The hs_code of this DeclaredGoods.  # noqa: E501
        :type: str
        """
        if hs_code is None:
            raise ValueError("Invalid value for `hs_code`, must not be `None`")  # noqa: E501

        self._hs_code = hs_code

    @property
    def goods_description(self):
        """Gets the goods_description of this DeclaredGoods.  # noqa: E501

        Text description of the item being traded  # noqa: E501

        :return: The goods_description of this DeclaredGoods.  # noqa: E501
        :rtype: str
        """
        return self._goods_description

    @goods_description.setter
    def goods_description(self, goods_description):
        """Sets the goods_description of this DeclaredGoods.

        Text description of the item being traded  # noqa: E501

        :param goods_description: The goods_description of this DeclaredGoods.  # noqa: E501
        :type: str
        """
        if goods_description is None:
            raise ValueError("Invalid value for `goods_description`, must not be `None`")  # noqa: E501

        self._goods_description = goods_description

    @property
    def value(self):
        """Gets the value of this DeclaredGoods.  # noqa: E501

        Monetary value of the item in the specified currency  # noqa: E501

        :return: The value of this DeclaredGoods.  # noqa: E501
        :rtype: float
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this DeclaredGoods.

        Monetary value of the item in the specified currency  # noqa: E501

        :param value: The value of this DeclaredGoods.  # noqa: E501
        :type: float
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")  # noqa: E501

        self._value = value

    @property
    def currency(self):
        """Gets the currency of this DeclaredGoods.  # noqa: E501

        Three character currency abbreviation  # noqa: E501

        :return: The currency of this DeclaredGoods.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this DeclaredGoods.

        Three character currency abbreviation  # noqa: E501

        :param currency: The currency of this DeclaredGoods.  # noqa: E501
        :type: str
        """
        if currency is None:
            raise ValueError("Invalid value for `currency`, must not be `None`")  # noqa: E501

        self._currency = currency

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DeclaredGoods, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeclaredGoods):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
