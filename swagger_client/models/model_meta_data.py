# coding: utf-8

"""
    Altana Atlas API

    Altana Atlas for Regulatory Risk and Trade Compliance  # noqa: E501

    OpenAPI spec version: {{ version or \"v0.0.1\" }}
    Contact: engineering@altanatech.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ModelMetaData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'model_metadata_bool': 'bool',
        'page_size': 'int',
        'model_artifact': 'object',
        'match_search_space': 'int',
        'model_features': 'object',
        'temp_que_lower': 'str',
        'temp_res_lower': 'str',
        'query_precleaned_indicator': 'bool'
    }

    attribute_map = {
        'model_metadata_bool': 'model_metadata_bool',
        'page_size': 'page_size',
        'model_artifact': 'model_artifact',
        'match_search_space': 'match_search_space',
        'model_features': 'model_features',
        'temp_que_lower': 'temp_que_lower',
        'temp_res_lower': 'temp_res_lower',
        'query_precleaned_indicator': 'query_precleaned_indicator'
    }

    def __init__(self, model_metadata_bool=None, page_size=None, model_artifact=None, match_search_space=None, model_features=None, temp_que_lower=None, temp_res_lower=None, query_precleaned_indicator=None):  # noqa: E501
        """ModelMetaData - a model defined in Swagger"""  # noqa: E501
        self._model_metadata_bool = None
        self._page_size = None
        self._model_artifact = None
        self._match_search_space = None
        self._model_features = None
        self._temp_que_lower = None
        self._temp_res_lower = None
        self._query_precleaned_indicator = None
        self.discriminator = None
        if model_metadata_bool is not None:
            self.model_metadata_bool = model_metadata_bool
        if page_size is not None:
            self.page_size = page_size
        if model_artifact is not None:
            self.model_artifact = model_artifact
        if match_search_space is not None:
            self.match_search_space = match_search_space
        if model_features is not None:
            self.model_features = model_features
        if temp_que_lower is not None:
            self.temp_que_lower = temp_que_lower
        if temp_res_lower is not None:
            self.temp_res_lower = temp_res_lower
        if query_precleaned_indicator is not None:
            self.query_precleaned_indicator = query_precleaned_indicator

    @property
    def model_metadata_bool(self):
        """Gets the model_metadata_bool of this ModelMetaData.  # noqa: E501


        :return: The model_metadata_bool of this ModelMetaData.  # noqa: E501
        :rtype: bool
        """
        return self._model_metadata_bool

    @model_metadata_bool.setter
    def model_metadata_bool(self, model_metadata_bool):
        """Sets the model_metadata_bool of this ModelMetaData.


        :param model_metadata_bool: The model_metadata_bool of this ModelMetaData.  # noqa: E501
        :type: bool
        """

        self._model_metadata_bool = model_metadata_bool

    @property
    def page_size(self):
        """Gets the page_size of this ModelMetaData.  # noqa: E501


        :return: The page_size of this ModelMetaData.  # noqa: E501
        :rtype: int
        """
        return self._page_size

    @page_size.setter
    def page_size(self, page_size):
        """Sets the page_size of this ModelMetaData.


        :param page_size: The page_size of this ModelMetaData.  # noqa: E501
        :type: int
        """

        self._page_size = page_size

    @property
    def model_artifact(self):
        """Gets the model_artifact of this ModelMetaData.  # noqa: E501


        :return: The model_artifact of this ModelMetaData.  # noqa: E501
        :rtype: object
        """
        return self._model_artifact

    @model_artifact.setter
    def model_artifact(self, model_artifact):
        """Sets the model_artifact of this ModelMetaData.


        :param model_artifact: The model_artifact of this ModelMetaData.  # noqa: E501
        :type: object
        """

        self._model_artifact = model_artifact

    @property
    def match_search_space(self):
        """Gets the match_search_space of this ModelMetaData.  # noqa: E501


        :return: The match_search_space of this ModelMetaData.  # noqa: E501
        :rtype: int
        """
        return self._match_search_space

    @match_search_space.setter
    def match_search_space(self, match_search_space):
        """Sets the match_search_space of this ModelMetaData.


        :param match_search_space: The match_search_space of this ModelMetaData.  # noqa: E501
        :type: int
        """

        self._match_search_space = match_search_space

    @property
    def model_features(self):
        """Gets the model_features of this ModelMetaData.  # noqa: E501


        :return: The model_features of this ModelMetaData.  # noqa: E501
        :rtype: object
        """
        return self._model_features

    @model_features.setter
    def model_features(self, model_features):
        """Sets the model_features of this ModelMetaData.


        :param model_features: The model_features of this ModelMetaData.  # noqa: E501
        :type: object
        """

        self._model_features = model_features

    @property
    def temp_que_lower(self):
        """Gets the temp_que_lower of this ModelMetaData.  # noqa: E501


        :return: The temp_que_lower of this ModelMetaData.  # noqa: E501
        :rtype: str
        """
        return self._temp_que_lower

    @temp_que_lower.setter
    def temp_que_lower(self, temp_que_lower):
        """Sets the temp_que_lower of this ModelMetaData.


        :param temp_que_lower: The temp_que_lower of this ModelMetaData.  # noqa: E501
        :type: str
        """

        self._temp_que_lower = temp_que_lower

    @property
    def temp_res_lower(self):
        """Gets the temp_res_lower of this ModelMetaData.  # noqa: E501


        :return: The temp_res_lower of this ModelMetaData.  # noqa: E501
        :rtype: str
        """
        return self._temp_res_lower

    @temp_res_lower.setter
    def temp_res_lower(self, temp_res_lower):
        """Sets the temp_res_lower of this ModelMetaData.


        :param temp_res_lower: The temp_res_lower of this ModelMetaData.  # noqa: E501
        :type: str
        """

        self._temp_res_lower = temp_res_lower

    @property
    def query_precleaned_indicator(self):
        """Gets the query_precleaned_indicator of this ModelMetaData.  # noqa: E501


        :return: The query_precleaned_indicator of this ModelMetaData.  # noqa: E501
        :rtype: bool
        """
        return self._query_precleaned_indicator

    @query_precleaned_indicator.setter
    def query_precleaned_indicator(self, query_precleaned_indicator):
        """Sets the query_precleaned_indicator of this ModelMetaData.


        :param query_precleaned_indicator: The query_precleaned_indicator of this ModelMetaData.  # noqa: E501
        :type: bool
        """

        self._query_precleaned_indicator = query_precleaned_indicator

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ModelMetaData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModelMetaData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
