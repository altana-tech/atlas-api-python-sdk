# coding: utf-8

"""
    Altana Atlas API

    Altana Atlas for Regulatory Risk and Trade Compliance  # noqa: E501

    OpenAPI spec version: {{ version or \"v0.0.1\" }}
    Contact: engineering@altanatech.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PredictedGoods(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'hs_code': 'str',
        'amount_to_collect': 'float',
        'hs_definition': 'str',
        'tariff': 'Tariff',
        'confidence': 'float'
    }

    attribute_map = {
        'hs_code': 'hs_code',
        'amount_to_collect': 'amount_to_collect',
        'hs_definition': 'hs_definition',
        'tariff': 'tariff',
        'confidence': 'confidence'
    }

    def __init__(self, hs_code=None, amount_to_collect=None, hs_definition=None, tariff=None, confidence=None):  # noqa: E501
        """PredictedGoods - a model defined in Swagger"""  # noqa: E501
        self._hs_code = None
        self._amount_to_collect = None
        self._hs_definition = None
        self._tariff = None
        self._confidence = None
        self.discriminator = None
        if hs_code is not None:
            self.hs_code = hs_code
        if amount_to_collect is not None:
            self.amount_to_collect = amount_to_collect
        if hs_definition is not None:
            self.hs_definition = hs_definition
        if tariff is not None:
            self.tariff = tariff
        if confidence is not None:
            self.confidence = confidence

    @property
    def hs_code(self):
        """Gets the hs_code of this PredictedGoods.  # noqa: E501


        :return: The hs_code of this PredictedGoods.  # noqa: E501
        :rtype: str
        """
        return self._hs_code

    @hs_code.setter
    def hs_code(self, hs_code):
        """Sets the hs_code of this PredictedGoods.


        :param hs_code: The hs_code of this PredictedGoods.  # noqa: E501
        :type: str
        """

        self._hs_code = hs_code

    @property
    def amount_to_collect(self):
        """Gets the amount_to_collect of this PredictedGoods.  # noqa: E501


        :return: The amount_to_collect of this PredictedGoods.  # noqa: E501
        :rtype: float
        """
        return self._amount_to_collect

    @amount_to_collect.setter
    def amount_to_collect(self, amount_to_collect):
        """Sets the amount_to_collect of this PredictedGoods.


        :param amount_to_collect: The amount_to_collect of this PredictedGoods.  # noqa: E501
        :type: float
        """

        self._amount_to_collect = amount_to_collect

    @property
    def hs_definition(self):
        """Gets the hs_definition of this PredictedGoods.  # noqa: E501


        :return: The hs_definition of this PredictedGoods.  # noqa: E501
        :rtype: str
        """
        return self._hs_definition

    @hs_definition.setter
    def hs_definition(self, hs_definition):
        """Sets the hs_definition of this PredictedGoods.


        :param hs_definition: The hs_definition of this PredictedGoods.  # noqa: E501
        :type: str
        """

        self._hs_definition = hs_definition

    @property
    def tariff(self):
        """Gets the tariff of this PredictedGoods.  # noqa: E501


        :return: The tariff of this PredictedGoods.  # noqa: E501
        :rtype: Tariff
        """
        return self._tariff

    @tariff.setter
    def tariff(self, tariff):
        """Sets the tariff of this PredictedGoods.


        :param tariff: The tariff of this PredictedGoods.  # noqa: E501
        :type: Tariff
        """

        self._tariff = tariff

    @property
    def confidence(self):
        """Gets the confidence of this PredictedGoods.  # noqa: E501


        :return: The confidence of this PredictedGoods.  # noqa: E501
        :rtype: float
        """
        return self._confidence

    @confidence.setter
    def confidence(self, confidence):
        """Sets the confidence of this PredictedGoods.


        :param confidence: The confidence of this PredictedGoods.  # noqa: E501
        :type: float
        """

        self._confidence = confidence

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PredictedGoods, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PredictedGoods):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
