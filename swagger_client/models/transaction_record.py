# coding: utf-8

"""
    Altana Atlas API

    Altana Atlas for Regulatory Risk and Trade Compliance  # noqa: E501

    OpenAPI spec version: {{ version or \"v0.0.1\" }}
    Contact: engineering@altanatech.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TransactionRecord(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'transaction_date_time': 'datetime',
        'trade_direction': 'str',
        'declared': 'DeclaredGoods',
        'route': 'TradeRoute',
        'importer': 'Party',
        'exporter': 'Party',
        'quantity': 'GoodsMeasure',
        'weight': 'GoodsMeasure'
    }

    attribute_map = {
        'id': 'id',
        'transaction_date_time': 'transaction_date_time',
        'trade_direction': 'trade_direction',
        'declared': 'declared',
        'route': 'route',
        'importer': 'importer',
        'exporter': 'exporter',
        'quantity': 'quantity',
        'weight': 'weight'
    }

    def __init__(self, id=None, transaction_date_time=None, trade_direction=None, declared=None, route=None, importer=None, exporter=None, quantity=None, weight=None):  # noqa: E501
        """TransactionRecord - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._transaction_date_time = None
        self._trade_direction = None
        self._declared = None
        self._route = None
        self._importer = None
        self._exporter = None
        self._quantity = None
        self._weight = None
        self.discriminator = None
        self.id = id
        self.transaction_date_time = transaction_date_time
        self.trade_direction = trade_direction
        self.declared = declared
        self.route = route
        self.importer = importer
        self.exporter = exporter
        self.quantity = quantity
        self.weight = weight

    @property
    def id(self):
        """Gets the id of this TransactionRecord.  # noqa: E501


        :return: The id of this TransactionRecord.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TransactionRecord.


        :param id: The id of this TransactionRecord.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def transaction_date_time(self):
        """Gets the transaction_date_time of this TransactionRecord.  # noqa: E501


        :return: The transaction_date_time of this TransactionRecord.  # noqa: E501
        :rtype: datetime
        """
        return self._transaction_date_time

    @transaction_date_time.setter
    def transaction_date_time(self, transaction_date_time):
        """Sets the transaction_date_time of this TransactionRecord.


        :param transaction_date_time: The transaction_date_time of this TransactionRecord.  # noqa: E501
        :type: datetime
        """
        if transaction_date_time is None:
            raise ValueError("Invalid value for `transaction_date_time`, must not be `None`")  # noqa: E501

        self._transaction_date_time = transaction_date_time

    @property
    def trade_direction(self):
        """Gets the trade_direction of this TransactionRecord.  # noqa: E501


        :return: The trade_direction of this TransactionRecord.  # noqa: E501
        :rtype: str
        """
        return self._trade_direction

    @trade_direction.setter
    def trade_direction(self, trade_direction):
        """Sets the trade_direction of this TransactionRecord.


        :param trade_direction: The trade_direction of this TransactionRecord.  # noqa: E501
        :type: str
        """
        if trade_direction is None:
            raise ValueError("Invalid value for `trade_direction`, must not be `None`")  # noqa: E501
        allowed_values = ["import", "export"]  # noqa: E501
        if trade_direction not in allowed_values:
            raise ValueError(
                "Invalid value for `trade_direction` ({0}), must be one of {1}"  # noqa: E501
                .format(trade_direction, allowed_values)
            )

        self._trade_direction = trade_direction

    @property
    def declared(self):
        """Gets the declared of this TransactionRecord.  # noqa: E501


        :return: The declared of this TransactionRecord.  # noqa: E501
        :rtype: DeclaredGoods
        """
        return self._declared

    @declared.setter
    def declared(self, declared):
        """Sets the declared of this TransactionRecord.


        :param declared: The declared of this TransactionRecord.  # noqa: E501
        :type: DeclaredGoods
        """
        if declared is None:
            raise ValueError("Invalid value for `declared`, must not be `None`")  # noqa: E501

        self._declared = declared

    @property
    def route(self):
        """Gets the route of this TransactionRecord.  # noqa: E501


        :return: The route of this TransactionRecord.  # noqa: E501
        :rtype: TradeRoute
        """
        return self._route

    @route.setter
    def route(self, route):
        """Sets the route of this TransactionRecord.


        :param route: The route of this TransactionRecord.  # noqa: E501
        :type: TradeRoute
        """
        if route is None:
            raise ValueError("Invalid value for `route`, must not be `None`")  # noqa: E501

        self._route = route

    @property
    def importer(self):
        """Gets the importer of this TransactionRecord.  # noqa: E501


        :return: The importer of this TransactionRecord.  # noqa: E501
        :rtype: Party
        """
        return self._importer

    @importer.setter
    def importer(self, importer):
        """Sets the importer of this TransactionRecord.


        :param importer: The importer of this TransactionRecord.  # noqa: E501
        :type: Party
        """
        if importer is None:
            raise ValueError("Invalid value for `importer`, must not be `None`")  # noqa: E501

        self._importer = importer

    @property
    def exporter(self):
        """Gets the exporter of this TransactionRecord.  # noqa: E501


        :return: The exporter of this TransactionRecord.  # noqa: E501
        :rtype: Party
        """
        return self._exporter

    @exporter.setter
    def exporter(self, exporter):
        """Sets the exporter of this TransactionRecord.


        :param exporter: The exporter of this TransactionRecord.  # noqa: E501
        :type: Party
        """
        if exporter is None:
            raise ValueError("Invalid value for `exporter`, must not be `None`")  # noqa: E501

        self._exporter = exporter

    @property
    def quantity(self):
        """Gets the quantity of this TransactionRecord.  # noqa: E501


        :return: The quantity of this TransactionRecord.  # noqa: E501
        :rtype: GoodsMeasure
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this TransactionRecord.


        :param quantity: The quantity of this TransactionRecord.  # noqa: E501
        :type: GoodsMeasure
        """
        if quantity is None:
            raise ValueError("Invalid value for `quantity`, must not be `None`")  # noqa: E501

        self._quantity = quantity

    @property
    def weight(self):
        """Gets the weight of this TransactionRecord.  # noqa: E501


        :return: The weight of this TransactionRecord.  # noqa: E501
        :rtype: GoodsMeasure
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this TransactionRecord.


        :param weight: The weight of this TransactionRecord.  # noqa: E501
        :type: GoodsMeasure
        """
        if weight is None:
            raise ValueError("Invalid value for `weight`, must not be `None`")  # noqa: E501

        self._weight = weight

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TransactionRecord, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TransactionRecord):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
