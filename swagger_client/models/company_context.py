# coding: utf-8

"""
    Altana Atlas API

    Altana Atlas for Regulatory Risk and Trade Compliance  # noqa: E501

    OpenAPI spec version: {{ version or \"v0.0.1\" }}
    Contact: engineering@altanatech.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CompanyContext(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'number_records': 'int',
        'trading_partners': 'list[str]',
        'suppliers': 'list[str]',
        'buyers': 'list[str]',
        'countries_of_origin': 'list[str]',
        'countries_of_destination': 'list[str]',
        'countries_of_operation': 'list[str]',
        'hs_traded': 'list[str]',
        'industries': 'list[str]',
        'products_sent': 'list[str]',
        'products_received': 'list[str]'
    }

    attribute_map = {
        'number_records': 'number_records',
        'trading_partners': 'trading_partners',
        'suppliers': 'suppliers',
        'buyers': 'buyers',
        'countries_of_origin': 'countries_of_origin',
        'countries_of_destination': 'countries_of_destination',
        'countries_of_operation': 'countries_of_operation',
        'hs_traded': 'hs_traded',
        'industries': 'industries',
        'products_sent': 'products_sent',
        'products_received': 'products_received'
    }

    def __init__(self, number_records=None, trading_partners=None, suppliers=None, buyers=None, countries_of_origin=None, countries_of_destination=None, countries_of_operation=None, hs_traded=None, industries=None, products_sent=None, products_received=None):  # noqa: E501
        """CompanyContext - a model defined in Swagger"""  # noqa: E501
        self._number_records = None
        self._trading_partners = None
        self._suppliers = None
        self._buyers = None
        self._countries_of_origin = None
        self._countries_of_destination = None
        self._countries_of_operation = None
        self._hs_traded = None
        self._industries = None
        self._products_sent = None
        self._products_received = None
        self.discriminator = None
        self.number_records = number_records
        self.trading_partners = trading_partners
        self.suppliers = suppliers
        self.buyers = buyers
        self.countries_of_origin = countries_of_origin
        self.countries_of_destination = countries_of_destination
        if countries_of_operation is not None:
            self.countries_of_operation = countries_of_operation
        self.hs_traded = hs_traded
        self.industries = industries
        if products_sent is not None:
            self.products_sent = products_sent
        if products_received is not None:
            self.products_received = products_received

    @property
    def number_records(self):
        """Gets the number_records of this CompanyContext.  # noqa: E501

        Number of transaction records associated with this company  # noqa: E501

        :return: The number_records of this CompanyContext.  # noqa: E501
        :rtype: int
        """
        return self._number_records

    @number_records.setter
    def number_records(self, number_records):
        """Sets the number_records of this CompanyContext.

        Number of transaction records associated with this company  # noqa: E501

        :param number_records: The number_records of this CompanyContext.  # noqa: E501
        :type: int
        """
        if number_records is None:
            raise ValueError("Invalid value for `number_records`, must not be `None`")  # noqa: E501

        self._number_records = number_records

    @property
    def trading_partners(self):
        """Gets the trading_partners of this CompanyContext.  # noqa: E501

        A list of Altana Canonical Company Identifiers, representing the joint set of buyers and suppliers  # noqa: E501

        :return: The trading_partners of this CompanyContext.  # noqa: E501
        :rtype: list[str]
        """
        return self._trading_partners

    @trading_partners.setter
    def trading_partners(self, trading_partners):
        """Sets the trading_partners of this CompanyContext.

        A list of Altana Canonical Company Identifiers, representing the joint set of buyers and suppliers  # noqa: E501

        :param trading_partners: The trading_partners of this CompanyContext.  # noqa: E501
        :type: list[str]
        """
        if trading_partners is None:
            raise ValueError("Invalid value for `trading_partners`, must not be `None`")  # noqa: E501

        self._trading_partners = trading_partners

    @property
    def suppliers(self):
        """Gets the suppliers of this CompanyContext.  # noqa: E501

        A list of Altana Canonical Company Identifiers, representing companies this company buys from  # noqa: E501

        :return: The suppliers of this CompanyContext.  # noqa: E501
        :rtype: list[str]
        """
        return self._suppliers

    @suppliers.setter
    def suppliers(self, suppliers):
        """Sets the suppliers of this CompanyContext.

        A list of Altana Canonical Company Identifiers, representing companies this company buys from  # noqa: E501

        :param suppliers: The suppliers of this CompanyContext.  # noqa: E501
        :type: list[str]
        """
        if suppliers is None:
            raise ValueError("Invalid value for `suppliers`, must not be `None`")  # noqa: E501

        self._suppliers = suppliers

    @property
    def buyers(self):
        """Gets the buyers of this CompanyContext.  # noqa: E501

        A list of Altana Canonical Company Identifiers, representing companies this company sells to  # noqa: E501

        :return: The buyers of this CompanyContext.  # noqa: E501
        :rtype: list[str]
        """
        return self._buyers

    @buyers.setter
    def buyers(self, buyers):
        """Sets the buyers of this CompanyContext.

        A list of Altana Canonical Company Identifiers, representing companies this company sells to  # noqa: E501

        :param buyers: The buyers of this CompanyContext.  # noqa: E501
        :type: list[str]
        """
        if buyers is None:
            raise ValueError("Invalid value for `buyers`, must not be `None`")  # noqa: E501

        self._buyers = buyers

    @property
    def countries_of_origin(self):
        """Gets the countries_of_origin of this CompanyContext.  # noqa: E501

        A list of ISO-2 country codes  # noqa: E501

        :return: The countries_of_origin of this CompanyContext.  # noqa: E501
        :rtype: list[str]
        """
        return self._countries_of_origin

    @countries_of_origin.setter
    def countries_of_origin(self, countries_of_origin):
        """Sets the countries_of_origin of this CompanyContext.

        A list of ISO-2 country codes  # noqa: E501

        :param countries_of_origin: The countries_of_origin of this CompanyContext.  # noqa: E501
        :type: list[str]
        """
        if countries_of_origin is None:
            raise ValueError("Invalid value for `countries_of_origin`, must not be `None`")  # noqa: E501

        self._countries_of_origin = countries_of_origin

    @property
    def countries_of_destination(self):
        """Gets the countries_of_destination of this CompanyContext.  # noqa: E501

        A list of ISO-2 country codes  # noqa: E501

        :return: The countries_of_destination of this CompanyContext.  # noqa: E501
        :rtype: list[str]
        """
        return self._countries_of_destination

    @countries_of_destination.setter
    def countries_of_destination(self, countries_of_destination):
        """Sets the countries_of_destination of this CompanyContext.

        A list of ISO-2 country codes  # noqa: E501

        :param countries_of_destination: The countries_of_destination of this CompanyContext.  # noqa: E501
        :type: list[str]
        """
        if countries_of_destination is None:
            raise ValueError("Invalid value for `countries_of_destination`, must not be `None`")  # noqa: E501

        self._countries_of_destination = countries_of_destination

    @property
    def countries_of_operation(self):
        """Gets the countries_of_operation of this CompanyContext.  # noqa: E501

        A list of ISO-2 country codes in which a company owns facilities  # noqa: E501

        :return: The countries_of_operation of this CompanyContext.  # noqa: E501
        :rtype: list[str]
        """
        return self._countries_of_operation

    @countries_of_operation.setter
    def countries_of_operation(self, countries_of_operation):
        """Sets the countries_of_operation of this CompanyContext.

        A list of ISO-2 country codes in which a company owns facilities  # noqa: E501

        :param countries_of_operation: The countries_of_operation of this CompanyContext.  # noqa: E501
        :type: list[str]
        """

        self._countries_of_operation = countries_of_operation

    @property
    def hs_traded(self):
        """Gets the hs_traded of this CompanyContext.  # noqa: E501

        A list of HS code section prefixes  # noqa: E501

        :return: The hs_traded of this CompanyContext.  # noqa: E501
        :rtype: list[str]
        """
        return self._hs_traded

    @hs_traded.setter
    def hs_traded(self, hs_traded):
        """Sets the hs_traded of this CompanyContext.

        A list of HS code section prefixes  # noqa: E501

        :param hs_traded: The hs_traded of this CompanyContext.  # noqa: E501
        :type: list[str]
        """
        if hs_traded is None:
            raise ValueError("Invalid value for `hs_traded`, must not be `None`")  # noqa: E501

        self._hs_traded = hs_traded

    @property
    def industries(self):
        """Gets the industries of this CompanyContext.  # noqa: E501

        A list of industries defined by Altana taxonomy  # noqa: E501

        :return: The industries of this CompanyContext.  # noqa: E501
        :rtype: list[str]
        """
        return self._industries

    @industries.setter
    def industries(self, industries):
        """Sets the industries of this CompanyContext.

        A list of industries defined by Altana taxonomy  # noqa: E501

        :param industries: The industries of this CompanyContext.  # noqa: E501
        :type: list[str]
        """
        if industries is None:
            raise ValueError("Invalid value for `industries`, must not be `None`")  # noqa: E501

        self._industries = industries

    @property
    def products_sent(self):
        """Gets the products_sent of this CompanyContext.  # noqa: E501

        A list of product IDs that a company sends  # noqa: E501

        :return: The products_sent of this CompanyContext.  # noqa: E501
        :rtype: list[str]
        """
        return self._products_sent

    @products_sent.setter
    def products_sent(self, products_sent):
        """Sets the products_sent of this CompanyContext.

        A list of product IDs that a company sends  # noqa: E501

        :param products_sent: The products_sent of this CompanyContext.  # noqa: E501
        :type: list[str]
        """

        self._products_sent = products_sent

    @property
    def products_received(self):
        """Gets the products_received of this CompanyContext.  # noqa: E501

        A list of product IDs that a company receives  # noqa: E501

        :return: The products_received of this CompanyContext.  # noqa: E501
        :rtype: list[str]
        """
        return self._products_received

    @products_received.setter
    def products_received(self, products_received):
        """Sets the products_received of this CompanyContext.

        A list of product IDs that a company receives  # noqa: E501

        :param products_received: The products_received of this CompanyContext.  # noqa: E501
        :type: list[str]
        """

        self._products_received = products_received

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CompanyContext, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CompanyContext):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
