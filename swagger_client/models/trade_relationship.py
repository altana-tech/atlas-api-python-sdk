# coding: utf-8

"""
    Altana Atlas API

    Altana Atlas for Regulatory Risk and Trade Compliance  # noqa: E501

    OpenAPI spec version: {{ version or \"v0.0.1\" }}
    Contact: engineering@altanatech.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TradeRelationship(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'importer_company_canon_id': 'str',
        'exporter_company_canon_id': 'str',
        'importer_canon_id': 'str',
        'exporter_canon_id': 'str',
        'importer_company_name': 'str',
        'exporter_company_name': 'str',
        'risks': 'list[Risk]',
        'hs_traded': 'list[str]',
        'industries': 'list[str]',
        'number_records': 'int',
        'countries_of_origin': 'list[str]',
        'countries_of_destination': 'list[str]',
        'importer_restrictions': 'list[Restriction]',
        'exporter_restrictions': 'list[Restriction]'
    }

    attribute_map = {
        'importer_company_canon_id': 'importer_company_canon_id',
        'exporter_company_canon_id': 'exporter_company_canon_id',
        'importer_canon_id': 'importer_canon_id',
        'exporter_canon_id': 'exporter_canon_id',
        'importer_company_name': 'importer_company_name',
        'exporter_company_name': 'exporter_company_name',
        'risks': 'risks',
        'hs_traded': 'hs_traded',
        'industries': 'industries',
        'number_records': 'number_records',
        'countries_of_origin': 'countries_of_origin',
        'countries_of_destination': 'countries_of_destination',
        'importer_restrictions': 'importer_restrictions',
        'exporter_restrictions': 'exporter_restrictions'
    }

    def __init__(self, importer_company_canon_id=None, exporter_company_canon_id=None, importer_canon_id=None, exporter_canon_id=None, importer_company_name=None, exporter_company_name=None, risks=None, hs_traded=None, industries=None, number_records=None, countries_of_origin=None, countries_of_destination=None, importer_restrictions=None, exporter_restrictions=None):  # noqa: E501
        """TradeRelationship - a model defined in Swagger"""  # noqa: E501
        self._importer_company_canon_id = None
        self._exporter_company_canon_id = None
        self._importer_canon_id = None
        self._exporter_canon_id = None
        self._importer_company_name = None
        self._exporter_company_name = None
        self._risks = None
        self._hs_traded = None
        self._industries = None
        self._number_records = None
        self._countries_of_origin = None
        self._countries_of_destination = None
        self._importer_restrictions = None
        self._exporter_restrictions = None
        self.discriminator = None
        if importer_company_canon_id is not None:
            self.importer_company_canon_id = importer_company_canon_id
        if exporter_company_canon_id is not None:
            self.exporter_company_canon_id = exporter_company_canon_id
        if importer_canon_id is not None:
            self.importer_canon_id = importer_canon_id
        if exporter_canon_id is not None:
            self.exporter_canon_id = exporter_canon_id
        if importer_company_name is not None:
            self.importer_company_name = importer_company_name
        if exporter_company_name is not None:
            self.exporter_company_name = exporter_company_name
        if risks is not None:
            self.risks = risks
        if hs_traded is not None:
            self.hs_traded = hs_traded
        if industries is not None:
            self.industries = industries
        if number_records is not None:
            self.number_records = number_records
        if countries_of_origin is not None:
            self.countries_of_origin = countries_of_origin
        if countries_of_destination is not None:
            self.countries_of_destination = countries_of_destination
        if importer_restrictions is not None:
            self.importer_restrictions = importer_restrictions
        if exporter_restrictions is not None:
            self.exporter_restrictions = exporter_restrictions

    @property
    def importer_company_canon_id(self):
        """Gets the importer_company_canon_id of this TradeRelationship.  # noqa: E501


        :return: The importer_company_canon_id of this TradeRelationship.  # noqa: E501
        :rtype: str
        """
        return self._importer_company_canon_id

    @importer_company_canon_id.setter
    def importer_company_canon_id(self, importer_company_canon_id):
        """Sets the importer_company_canon_id of this TradeRelationship.


        :param importer_company_canon_id: The importer_company_canon_id of this TradeRelationship.  # noqa: E501
        :type: str
        """

        self._importer_company_canon_id = importer_company_canon_id

    @property
    def exporter_company_canon_id(self):
        """Gets the exporter_company_canon_id of this TradeRelationship.  # noqa: E501


        :return: The exporter_company_canon_id of this TradeRelationship.  # noqa: E501
        :rtype: str
        """
        return self._exporter_company_canon_id

    @exporter_company_canon_id.setter
    def exporter_company_canon_id(self, exporter_company_canon_id):
        """Sets the exporter_company_canon_id of this TradeRelationship.


        :param exporter_company_canon_id: The exporter_company_canon_id of this TradeRelationship.  # noqa: E501
        :type: str
        """

        self._exporter_company_canon_id = exporter_company_canon_id

    @property
    def importer_canon_id(self):
        """Gets the importer_canon_id of this TradeRelationship.  # noqa: E501


        :return: The importer_canon_id of this TradeRelationship.  # noqa: E501
        :rtype: str
        """
        return self._importer_canon_id

    @importer_canon_id.setter
    def importer_canon_id(self, importer_canon_id):
        """Sets the importer_canon_id of this TradeRelationship.


        :param importer_canon_id: The importer_canon_id of this TradeRelationship.  # noqa: E501
        :type: str
        """

        self._importer_canon_id = importer_canon_id

    @property
    def exporter_canon_id(self):
        """Gets the exporter_canon_id of this TradeRelationship.  # noqa: E501


        :return: The exporter_canon_id of this TradeRelationship.  # noqa: E501
        :rtype: str
        """
        return self._exporter_canon_id

    @exporter_canon_id.setter
    def exporter_canon_id(self, exporter_canon_id):
        """Sets the exporter_canon_id of this TradeRelationship.


        :param exporter_canon_id: The exporter_canon_id of this TradeRelationship.  # noqa: E501
        :type: str
        """

        self._exporter_canon_id = exporter_canon_id

    @property
    def importer_company_name(self):
        """Gets the importer_company_name of this TradeRelationship.  # noqa: E501


        :return: The importer_company_name of this TradeRelationship.  # noqa: E501
        :rtype: str
        """
        return self._importer_company_name

    @importer_company_name.setter
    def importer_company_name(self, importer_company_name):
        """Sets the importer_company_name of this TradeRelationship.


        :param importer_company_name: The importer_company_name of this TradeRelationship.  # noqa: E501
        :type: str
        """

        self._importer_company_name = importer_company_name

    @property
    def exporter_company_name(self):
        """Gets the exporter_company_name of this TradeRelationship.  # noqa: E501


        :return: The exporter_company_name of this TradeRelationship.  # noqa: E501
        :rtype: str
        """
        return self._exporter_company_name

    @exporter_company_name.setter
    def exporter_company_name(self, exporter_company_name):
        """Sets the exporter_company_name of this TradeRelationship.


        :param exporter_company_name: The exporter_company_name of this TradeRelationship.  # noqa: E501
        :type: str
        """

        self._exporter_company_name = exporter_company_name

    @property
    def risks(self):
        """Gets the risks of this TradeRelationship.  # noqa: E501


        :return: The risks of this TradeRelationship.  # noqa: E501
        :rtype: list[Risk]
        """
        return self._risks

    @risks.setter
    def risks(self, risks):
        """Sets the risks of this TradeRelationship.


        :param risks: The risks of this TradeRelationship.  # noqa: E501
        :type: list[Risk]
        """

        self._risks = risks

    @property
    def hs_traded(self):
        """Gets the hs_traded of this TradeRelationship.  # noqa: E501

        A list of HS code section prefixes  # noqa: E501

        :return: The hs_traded of this TradeRelationship.  # noqa: E501
        :rtype: list[str]
        """
        return self._hs_traded

    @hs_traded.setter
    def hs_traded(self, hs_traded):
        """Sets the hs_traded of this TradeRelationship.

        A list of HS code section prefixes  # noqa: E501

        :param hs_traded: The hs_traded of this TradeRelationship.  # noqa: E501
        :type: list[str]
        """

        self._hs_traded = hs_traded

    @property
    def industries(self):
        """Gets the industries of this TradeRelationship.  # noqa: E501

        A list of industries defined by Altana taxonomy  # noqa: E501

        :return: The industries of this TradeRelationship.  # noqa: E501
        :rtype: list[str]
        """
        return self._industries

    @industries.setter
    def industries(self, industries):
        """Sets the industries of this TradeRelationship.

        A list of industries defined by Altana taxonomy  # noqa: E501

        :param industries: The industries of this TradeRelationship.  # noqa: E501
        :type: list[str]
        """

        self._industries = industries

    @property
    def number_records(self):
        """Gets the number_records of this TradeRelationship.  # noqa: E501

        Number of transaction records associated with this edge  # noqa: E501

        :return: The number_records of this TradeRelationship.  # noqa: E501
        :rtype: int
        """
        return self._number_records

    @number_records.setter
    def number_records(self, number_records):
        """Sets the number_records of this TradeRelationship.

        Number of transaction records associated with this edge  # noqa: E501

        :param number_records: The number_records of this TradeRelationship.  # noqa: E501
        :type: int
        """

        self._number_records = number_records

    @property
    def countries_of_origin(self):
        """Gets the countries_of_origin of this TradeRelationship.  # noqa: E501

        A list of ISO-2 country codes  # noqa: E501

        :return: The countries_of_origin of this TradeRelationship.  # noqa: E501
        :rtype: list[str]
        """
        return self._countries_of_origin

    @countries_of_origin.setter
    def countries_of_origin(self, countries_of_origin):
        """Sets the countries_of_origin of this TradeRelationship.

        A list of ISO-2 country codes  # noqa: E501

        :param countries_of_origin: The countries_of_origin of this TradeRelationship.  # noqa: E501
        :type: list[str]
        """

        self._countries_of_origin = countries_of_origin

    @property
    def countries_of_destination(self):
        """Gets the countries_of_destination of this TradeRelationship.  # noqa: E501

        A list of ISO-2 country codes  # noqa: E501

        :return: The countries_of_destination of this TradeRelationship.  # noqa: E501
        :rtype: list[str]
        """
        return self._countries_of_destination

    @countries_of_destination.setter
    def countries_of_destination(self, countries_of_destination):
        """Sets the countries_of_destination of this TradeRelationship.

        A list of ISO-2 country codes  # noqa: E501

        :param countries_of_destination: The countries_of_destination of this TradeRelationship.  # noqa: E501
        :type: list[str]
        """

        self._countries_of_destination = countries_of_destination

    @property
    def importer_restrictions(self):
        """Gets the importer_restrictions of this TradeRelationship.  # noqa: E501


        :return: The importer_restrictions of this TradeRelationship.  # noqa: E501
        :rtype: list[Restriction]
        """
        return self._importer_restrictions

    @importer_restrictions.setter
    def importer_restrictions(self, importer_restrictions):
        """Sets the importer_restrictions of this TradeRelationship.


        :param importer_restrictions: The importer_restrictions of this TradeRelationship.  # noqa: E501
        :type: list[Restriction]
        """

        self._importer_restrictions = importer_restrictions

    @property
    def exporter_restrictions(self):
        """Gets the exporter_restrictions of this TradeRelationship.  # noqa: E501


        :return: The exporter_restrictions of this TradeRelationship.  # noqa: E501
        :rtype: list[Restriction]
        """
        return self._exporter_restrictions

    @exporter_restrictions.setter
    def exporter_restrictions(self, exporter_restrictions):
        """Sets the exporter_restrictions of this TradeRelationship.


        :param exporter_restrictions: The exporter_restrictions of this TradeRelationship.  # noqa: E501
        :type: list[Restriction]
        """

        self._exporter_restrictions = exporter_restrictions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TradeRelationship, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TradeRelationship):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
