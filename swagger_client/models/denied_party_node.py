# coding: utf-8

"""
    Altana Atlas API

    Altana Atlas for Regulatory Risk and Trade Compliance  # noqa: E501

    OpenAPI spec version: v2.0.0-8
    Contact: engineering@altanatech.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.base_node import BaseNode  # noqa: F401,E501

class DeniedPartyNode(BaseNode):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'denied_parties_canon_id': 'str',
        'issuing_authority': 'str',
        'list_name': 'str',
        'notes': 'str',
        'severity': 'str',
        'sources': 'list[str]'
    }
    if hasattr(BaseNode, "swagger_types"):
        swagger_types.update(BaseNode.swagger_types)

    attribute_map = {
        'denied_parties_canon_id': 'denied_parties_canon_id',
        'issuing_authority': 'issuing_authority',
        'list_name': 'list_name',
        'notes': 'notes',
        'severity': 'severity',
        'sources': 'sources'
    }
    if hasattr(BaseNode, "attribute_map"):
        attribute_map.update(BaseNode.attribute_map)

    def __init__(self, denied_parties_canon_id=None, issuing_authority=None, list_name=None, notes=None, severity=None, sources=None, *args, **kwargs):  # noqa: E501
        """DeniedPartyNode - a model defined in Swagger"""  # noqa: E501
        self._denied_parties_canon_id = None
        self._issuing_authority = None
        self._list_name = None
        self._notes = None
        self._severity = None
        self._sources = None
        self.discriminator = None
        if denied_parties_canon_id is not None:
            self.denied_parties_canon_id = denied_parties_canon_id
        if issuing_authority is not None:
            self.issuing_authority = issuing_authority
        if list_name is not None:
            self.list_name = list_name
        if notes is not None:
            self.notes = notes
        if severity is not None:
            self.severity = severity
        if sources is not None:
            self.sources = sources
        BaseNode.__init__(self, *args, **kwargs)

    @property
    def denied_parties_canon_id(self):
        """Gets the denied_parties_canon_id of this DeniedPartyNode.  # noqa: E501

        A unique identifier for a denied party node  # noqa: E501

        :return: The denied_parties_canon_id of this DeniedPartyNode.  # noqa: E501
        :rtype: str
        """
        return self._denied_parties_canon_id

    @denied_parties_canon_id.setter
    def denied_parties_canon_id(self, denied_parties_canon_id):
        """Sets the denied_parties_canon_id of this DeniedPartyNode.

        A unique identifier for a denied party node  # noqa: E501

        :param denied_parties_canon_id: The denied_parties_canon_id of this DeniedPartyNode.  # noqa: E501
        :type: str
        """

        self._denied_parties_canon_id = denied_parties_canon_id

    @property
    def issuing_authority(self):
        """Gets the issuing_authority of this DeniedPartyNode.  # noqa: E501

        The geopolitical entity that issued the denied party guidance  # noqa: E501

        :return: The issuing_authority of this DeniedPartyNode.  # noqa: E501
        :rtype: str
        """
        return self._issuing_authority

    @issuing_authority.setter
    def issuing_authority(self, issuing_authority):
        """Sets the issuing_authority of this DeniedPartyNode.

        The geopolitical entity that issued the denied party guidance  # noqa: E501

        :param issuing_authority: The issuing_authority of this DeniedPartyNode.  # noqa: E501
        :type: str
        """

        self._issuing_authority = issuing_authority

    @property
    def list_name(self):
        """Gets the list_name of this DeniedPartyNode.  # noqa: E501

        The name of the document where the guidance was extracted from  # noqa: E501

        :return: The list_name of this DeniedPartyNode.  # noqa: E501
        :rtype: str
        """
        return self._list_name

    @list_name.setter
    def list_name(self, list_name):
        """Sets the list_name of this DeniedPartyNode.

        The name of the document where the guidance was extracted from  # noqa: E501

        :param list_name: The list_name of this DeniedPartyNode.  # noqa: E501
        :type: str
        """

        self._list_name = list_name

    @property
    def notes(self):
        """Gets the notes of this DeniedPartyNode.  # noqa: E501

        Notes and additional details about the denied party guidance  # noqa: E501

        :return: The notes of this DeniedPartyNode.  # noqa: E501
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this DeniedPartyNode.

        Notes and additional details about the denied party guidance  # noqa: E501

        :param notes: The notes of this DeniedPartyNode.  # noqa: E501
        :type: str
        """

        self._notes = notes

    @property
    def severity(self):
        """Gets the severity of this DeniedPartyNode.  # noqa: E501

        The severity of the denied party guidance  # noqa: E501

        :return: The severity of this DeniedPartyNode.  # noqa: E501
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this DeniedPartyNode.

        The severity of the denied party guidance  # noqa: E501

        :param severity: The severity of this DeniedPartyNode.  # noqa: E501
        :type: str
        """

        self._severity = severity

    @property
    def sources(self):
        """Gets the sources of this DeniedPartyNode.  # noqa: E501

        A list of data sources for the information  # noqa: E501

        :return: The sources of this DeniedPartyNode.  # noqa: E501
        :rtype: list[str]
        """
        return self._sources

    @sources.setter
    def sources(self, sources):
        """Sets the sources of this DeniedPartyNode.

        A list of data sources for the information  # noqa: E501

        :param sources: The sources of this DeniedPartyNode.  # noqa: E501
        :type: list[str]
        """

        self._sources = sources

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DeniedPartyNode, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeniedPartyNode):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
