# coding: utf-8

"""
    Altana Atlas API

    Altana Atlas for Regulatory Risk and Trade Compliance  # noqa: E501

    OpenAPI spec version: v2.0.0-8
    Contact: engineering@altanatech.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.base_edge import BaseEdge  # noqa: F401,E501

class DeniedPartyRelatedToEdge(BaseEdge):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'denied_parties_related_to_id': 'str',
        'destination_id': 'str',
        'severity': 'float',
        'source_id': 'str',
        'sources': 'list[str]'
    }
    if hasattr(BaseEdge, "swagger_types"):
        swagger_types.update(BaseEdge.swagger_types)

    attribute_map = {
        'denied_parties_related_to_id': 'denied_parties_related_to_id',
        'destination_id': 'destination_id',
        'severity': 'severity',
        'source_id': 'source_id',
        'sources': 'sources'
    }
    if hasattr(BaseEdge, "attribute_map"):
        attribute_map.update(BaseEdge.attribute_map)

    def __init__(self, denied_parties_related_to_id=None, destination_id=None, severity=None, source_id=None, sources=None, *args, **kwargs):  # noqa: E501
        """DeniedPartyRelatedToEdge - a model defined in Swagger"""  # noqa: E501
        self._denied_parties_related_to_id = None
        self._destination_id = None
        self._severity = None
        self._source_id = None
        self._sources = None
        self.discriminator = None
        if denied_parties_related_to_id is not None:
            self.denied_parties_related_to_id = denied_parties_related_to_id
        if destination_id is not None:
            self.destination_id = destination_id
        if severity is not None:
            self.severity = severity
        if source_id is not None:
            self.source_id = source_id
        if sources is not None:
            self.sources = sources
        BaseEdge.__init__(self, *args, **kwargs)

    @property
    def denied_parties_related_to_id(self):
        """Gets the denied_parties_related_to_id of this DeniedPartyRelatedToEdge.  # noqa: E501

        A unique identifier for a denied parties edge  # noqa: E501

        :return: The denied_parties_related_to_id of this DeniedPartyRelatedToEdge.  # noqa: E501
        :rtype: str
        """
        return self._denied_parties_related_to_id

    @denied_parties_related_to_id.setter
    def denied_parties_related_to_id(self, denied_parties_related_to_id):
        """Sets the denied_parties_related_to_id of this DeniedPartyRelatedToEdge.

        A unique identifier for a denied parties edge  # noqa: E501

        :param denied_parties_related_to_id: The denied_parties_related_to_id of this DeniedPartyRelatedToEdge.  # noqa: E501
        :type: str
        """

        self._denied_parties_related_to_id = denied_parties_related_to_id

    @property
    def destination_id(self):
        """Gets the destination_id of this DeniedPartyRelatedToEdge.  # noqa: E501

        The company_canon_id of the destination company with denied party guidance  # noqa: E501

        :return: The destination_id of this DeniedPartyRelatedToEdge.  # noqa: E501
        :rtype: str
        """
        return self._destination_id

    @destination_id.setter
    def destination_id(self, destination_id):
        """Sets the destination_id of this DeniedPartyRelatedToEdge.

        The company_canon_id of the destination company with denied party guidance  # noqa: E501

        :param destination_id: The destination_id of this DeniedPartyRelatedToEdge.  # noqa: E501
        :type: str
        """

        self._destination_id = destination_id

    @property
    def severity(self):
        """Gets the severity of this DeniedPartyRelatedToEdge.  # noqa: E501

        The severity of the denied party guidance  # noqa: E501

        :return: The severity of this DeniedPartyRelatedToEdge.  # noqa: E501
        :rtype: float
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this DeniedPartyRelatedToEdge.

        The severity of the denied party guidance  # noqa: E501

        :param severity: The severity of this DeniedPartyRelatedToEdge.  # noqa: E501
        :type: float
        """

        self._severity = severity

    @property
    def source_id(self):
        """Gets the source_id of this DeniedPartyRelatedToEdge.  # noqa: E501

        The denied_parties_canon_id of the source denied party node  # noqa: E501

        :return: The source_id of this DeniedPartyRelatedToEdge.  # noqa: E501
        :rtype: str
        """
        return self._source_id

    @source_id.setter
    def source_id(self, source_id):
        """Sets the source_id of this DeniedPartyRelatedToEdge.

        The denied_parties_canon_id of the source denied party node  # noqa: E501

        :param source_id: The source_id of this DeniedPartyRelatedToEdge.  # noqa: E501
        :type: str
        """

        self._source_id = source_id

    @property
    def sources(self):
        """Gets the sources of this DeniedPartyRelatedToEdge.  # noqa: E501

        A list of data sources for the information  # noqa: E501

        :return: The sources of this DeniedPartyRelatedToEdge.  # noqa: E501
        :rtype: list[str]
        """
        return self._sources

    @sources.setter
    def sources(self, sources):
        """Sets the sources of this DeniedPartyRelatedToEdge.

        A list of data sources for the information  # noqa: E501

        :param sources: The sources of this DeniedPartyRelatedToEdge.  # noqa: E501
        :type: list[str]
        """

        self._sources = sources

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DeniedPartyRelatedToEdge, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeniedPartyRelatedToEdge):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
