# coding: utf-8

"""
    Altana Atlas API

    Altana Atlas for Regulatory Risk and Trade Compliance  # noqa: E501

    OpenAPI spec version: {{ version or \"v0.0.1\" }}
    Contact: engineering@altanatech.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Tariff(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'duty': 'float',
        'excrate': 'float',
        'eparate': 'float',
        'spduty': 'float',
        'spexc': 'float',
        'envduty': 'float'
    }

    attribute_map = {
        'duty': 'duty',
        'excrate': 'excrate',
        'eparate': 'eparate',
        'spduty': 'spduty',
        'spexc': 'spexc',
        'envduty': 'envduty'
    }

    def __init__(self, duty=None, excrate=None, eparate=None, spduty=None, spexc=None, envduty=None):  # noqa: E501
        """Tariff - a model defined in Swagger"""  # noqa: E501
        self._duty = None
        self._excrate = None
        self._eparate = None
        self._spduty = None
        self._spexc = None
        self._envduty = None
        self.discriminator = None
        if duty is not None:
            self.duty = duty
        if excrate is not None:
            self.excrate = excrate
        if eparate is not None:
            self.eparate = eparate
        if spduty is not None:
            self.spduty = spduty
        if spexc is not None:
            self.spexc = spexc
        if envduty is not None:
            self.envduty = envduty

    @property
    def duty(self):
        """Gets the duty of this Tariff.  # noqa: E501

        Rate of Duty (ad valorem)  # noqa: E501

        :return: The duty of this Tariff.  # noqa: E501
        :rtype: float
        """
        return self._duty

    @duty.setter
    def duty(self, duty):
        """Sets the duty of this Tariff.

        Rate of Duty (ad valorem)  # noqa: E501

        :param duty: The duty of this Tariff.  # noqa: E501
        :type: float
        """

        self._duty = duty

    @property
    def excrate(self):
        """Gets the excrate of this Tariff.  # noqa: E501

        Excise Rate (ad valorem)  # noqa: E501

        :return: The excrate of this Tariff.  # noqa: E501
        :rtype: float
        """
        return self._excrate

    @excrate.setter
    def excrate(self, excrate):
        """Sets the excrate of this Tariff.

        Excise Rate (ad valorem)  # noqa: E501

        :param excrate: The excrate of this Tariff.  # noqa: E501
        :type: float
        """

        self._excrate = excrate

    @property
    def eparate(self):
        """Gets the eparate of this Tariff.  # noqa: E501

        Duty rate for countries covered under the EU-Cariforum Economic Partnership Agreement  # noqa: E501

        :return: The eparate of this Tariff.  # noqa: E501
        :rtype: float
        """
        return self._eparate

    @eparate.setter
    def eparate(self, eparate):
        """Sets the eparate of this Tariff.

        Duty rate for countries covered under the EU-Cariforum Economic Partnership Agreement  # noqa: E501

        :param eparate: The eparate of this Tariff.  # noqa: E501
        :type: float
        """

        self._eparate = eparate

    @property
    def spduty(self):
        """Gets the spduty of this Tariff.  # noqa: E501

        Specific Duty (USD)  # noqa: E501

        :return: The spduty of this Tariff.  # noqa: E501
        :rtype: float
        """
        return self._spduty

    @spduty.setter
    def spduty(self, spduty):
        """Sets the spduty of this Tariff.

        Specific Duty (USD)  # noqa: E501

        :param spduty: The spduty of this Tariff.  # noqa: E501
        :type: float
        """

        self._spduty = spduty

    @property
    def spexc(self):
        """Gets the spexc of this Tariff.  # noqa: E501

        Specific Excise (USD)  # noqa: E501

        :return: The spexc of this Tariff.  # noqa: E501
        :rtype: float
        """
        return self._spexc

    @spexc.setter
    def spexc(self, spexc):
        """Sets the spexc of this Tariff.

        Specific Excise (USD)  # noqa: E501

        :param spexc: The spexc of this Tariff.  # noqa: E501
        :type: float
        """

        self._spexc = spexc

    @property
    def envduty(self):
        """Gets the envduty of this Tariff.  # noqa: E501

        Environmental Duty (USD)  # noqa: E501

        :return: The envduty of this Tariff.  # noqa: E501
        :rtype: float
        """
        return self._envduty

    @envduty.setter
    def envduty(self, envduty):
        """Sets the envduty of this Tariff.

        Environmental Duty (USD)  # noqa: E501

        :param envduty: The envduty of this Tariff.  # noqa: E501
        :type: float
        """

        self._envduty = envduty

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Tariff, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Tariff):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
