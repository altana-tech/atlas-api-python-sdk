# coding: utf-8

"""
    Altana Atlas API

    Altana Atlas for Regulatory Risk and Trade Compliance  # noqa: E501

    OpenAPI spec version: {{ version or \"v0.0.1\" }}
    Contact: engineering@altanatech.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Company(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'company_name': 'str',
        'altana_canon_id': 'str',
        'restrictions': 'list[Restriction]',
        'risks': 'list[Risk]',
        'company_context': 'CompanyContext',
        'data_sources': 'list[str]'
    }

    attribute_map = {
        'company_name': 'company_name',
        'altana_canon_id': 'altana_canon_id',
        'restrictions': 'restrictions',
        'risks': 'risks',
        'company_context': 'company_context',
        'data_sources': 'data_sources'
    }

    def __init__(self, company_name=None, altana_canon_id=None, restrictions=None, risks=None, company_context=None, data_sources=None):  # noqa: E501
        """Company - a model defined in Swagger"""  # noqa: E501
        self._company_name = None
        self._altana_canon_id = None
        self._restrictions = None
        self._risks = None
        self._company_context = None
        self._data_sources = None
        self.discriminator = None
        self.company_name = company_name
        self.altana_canon_id = altana_canon_id
        self.restrictions = restrictions
        self.risks = risks
        self.company_context = company_context
        self.data_sources = data_sources

    @property
    def company_name(self):
        """Gets the company_name of this Company.  # noqa: E501

        The resolved company name associated with the canon ID  # noqa: E501

        :return: The company_name of this Company.  # noqa: E501
        :rtype: str
        """
        return self._company_name

    @company_name.setter
    def company_name(self, company_name):
        """Sets the company_name of this Company.

        The resolved company name associated with the canon ID  # noqa: E501

        :param company_name: The company_name of this Company.  # noqa: E501
        :type: str
        """
        if company_name is None:
            raise ValueError("Invalid value for `company_name`, must not be `None`")  # noqa: E501

        self._company_name = company_name

    @property
    def altana_canon_id(self):
        """Gets the altana_canon_id of this Company.  # noqa: E501

        Altana generated, entity resolved UUID representing a company  # noqa: E501

        :return: The altana_canon_id of this Company.  # noqa: E501
        :rtype: str
        """
        return self._altana_canon_id

    @altana_canon_id.setter
    def altana_canon_id(self, altana_canon_id):
        """Sets the altana_canon_id of this Company.

        Altana generated, entity resolved UUID representing a company  # noqa: E501

        :param altana_canon_id: The altana_canon_id of this Company.  # noqa: E501
        :type: str
        """
        if altana_canon_id is None:
            raise ValueError("Invalid value for `altana_canon_id`, must not be `None`")  # noqa: E501

        self._altana_canon_id = altana_canon_id

    @property
    def restrictions(self):
        """Gets the restrictions of this Company.  # noqa: E501


        :return: The restrictions of this Company.  # noqa: E501
        :rtype: list[Restriction]
        """
        return self._restrictions

    @restrictions.setter
    def restrictions(self, restrictions):
        """Sets the restrictions of this Company.


        :param restrictions: The restrictions of this Company.  # noqa: E501
        :type: list[Restriction]
        """
        if restrictions is None:
            raise ValueError("Invalid value for `restrictions`, must not be `None`")  # noqa: E501

        self._restrictions = restrictions

    @property
    def risks(self):
        """Gets the risks of this Company.  # noqa: E501


        :return: The risks of this Company.  # noqa: E501
        :rtype: list[Risk]
        """
        return self._risks

    @risks.setter
    def risks(self, risks):
        """Sets the risks of this Company.


        :param risks: The risks of this Company.  # noqa: E501
        :type: list[Risk]
        """
        if risks is None:
            raise ValueError("Invalid value for `risks`, must not be `None`")  # noqa: E501

        self._risks = risks

    @property
    def company_context(self):
        """Gets the company_context of this Company.  # noqa: E501


        :return: The company_context of this Company.  # noqa: E501
        :rtype: CompanyContext
        """
        return self._company_context

    @company_context.setter
    def company_context(self, company_context):
        """Sets the company_context of this Company.


        :param company_context: The company_context of this Company.  # noqa: E501
        :type: CompanyContext
        """
        if company_context is None:
            raise ValueError("Invalid value for `company_context`, must not be `None`")  # noqa: E501

        self._company_context = company_context

    @property
    def data_sources(self):
        """Gets the data_sources of this Company.  # noqa: E501


        :return: The data_sources of this Company.  # noqa: E501
        :rtype: list[str]
        """
        return self._data_sources

    @data_sources.setter
    def data_sources(self, data_sources):
        """Sets the data_sources of this Company.


        :param data_sources: The data_sources of this Company.  # noqa: E501
        :type: list[str]
        """
        if data_sources is None:
            raise ValueError("Invalid value for `data_sources`, must not be `None`")  # noqa: E501

        self._data_sources = data_sources

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Company, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Company):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
