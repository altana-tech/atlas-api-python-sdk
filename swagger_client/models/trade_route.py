# coding: utf-8

"""
    Altana Atlas API

    Altana Atlas for Regulatory Risk and Trade Compliance  # noqa: E501

    OpenAPI spec version: {{ version or \"v0.0.1\" }}
    Contact: engineering@altanatech.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TradeRoute(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'country_of_origin': 'str',
        'country_of_destination': 'str',
        'port_of_origin': 'str',
        'port_of_destination': 'str'
    }

    attribute_map = {
        'country_of_origin': 'country_of_origin',
        'country_of_destination': 'country_of_destination',
        'port_of_origin': 'port_of_origin',
        'port_of_destination': 'port_of_destination'
    }

    def __init__(self, country_of_origin=None, country_of_destination=None, port_of_origin=None, port_of_destination=None):  # noqa: E501
        """TradeRoute - a model defined in Swagger"""  # noqa: E501
        self._country_of_origin = None
        self._country_of_destination = None
        self._port_of_origin = None
        self._port_of_destination = None
        self.discriminator = None
        self.country_of_origin = country_of_origin
        self.country_of_destination = country_of_destination
        self.port_of_origin = port_of_origin
        self.port_of_destination = port_of_destination

    @property
    def country_of_origin(self):
        """Gets the country_of_origin of this TradeRoute.  # noqa: E501

        ISO-2 country code where the route is coming from  # noqa: E501

        :return: The country_of_origin of this TradeRoute.  # noqa: E501
        :rtype: str
        """
        return self._country_of_origin

    @country_of_origin.setter
    def country_of_origin(self, country_of_origin):
        """Sets the country_of_origin of this TradeRoute.

        ISO-2 country code where the route is coming from  # noqa: E501

        :param country_of_origin: The country_of_origin of this TradeRoute.  # noqa: E501
        :type: str
        """
        if country_of_origin is None:
            raise ValueError("Invalid value for `country_of_origin`, must not be `None`")  # noqa: E501

        self._country_of_origin = country_of_origin

    @property
    def country_of_destination(self):
        """Gets the country_of_destination of this TradeRoute.  # noqa: E501

        ISO-2 country code where the route is pointed towards  # noqa: E501

        :return: The country_of_destination of this TradeRoute.  # noqa: E501
        :rtype: str
        """
        return self._country_of_destination

    @country_of_destination.setter
    def country_of_destination(self, country_of_destination):
        """Sets the country_of_destination of this TradeRoute.

        ISO-2 country code where the route is pointed towards  # noqa: E501

        :param country_of_destination: The country_of_destination of this TradeRoute.  # noqa: E501
        :type: str
        """
        if country_of_destination is None:
            raise ValueError("Invalid value for `country_of_destination`, must not be `None`")  # noqa: E501

        self._country_of_destination = country_of_destination

    @property
    def port_of_origin(self):
        """Gets the port_of_origin of this TradeRoute.  # noqa: E501

        Text name of the port of origin  # noqa: E501

        :return: The port_of_origin of this TradeRoute.  # noqa: E501
        :rtype: str
        """
        return self._port_of_origin

    @port_of_origin.setter
    def port_of_origin(self, port_of_origin):
        """Sets the port_of_origin of this TradeRoute.

        Text name of the port of origin  # noqa: E501

        :param port_of_origin: The port_of_origin of this TradeRoute.  # noqa: E501
        :type: str
        """
        if port_of_origin is None:
            raise ValueError("Invalid value for `port_of_origin`, must not be `None`")  # noqa: E501

        self._port_of_origin = port_of_origin

    @property
    def port_of_destination(self):
        """Gets the port_of_destination of this TradeRoute.  # noqa: E501

        Text name of the destination port  # noqa: E501

        :return: The port_of_destination of this TradeRoute.  # noqa: E501
        :rtype: str
        """
        return self._port_of_destination

    @port_of_destination.setter
    def port_of_destination(self, port_of_destination):
        """Sets the port_of_destination of this TradeRoute.

        Text name of the destination port  # noqa: E501

        :param port_of_destination: The port_of_destination of this TradeRoute.  # noqa: E501
        :type: str
        """
        if port_of_destination is None:
            raise ValueError("Invalid value for `port_of_destination`, must not be `None`")  # noqa: E501

        self._port_of_destination = port_of_destination

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TradeRoute, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TradeRoute):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
