# coding: utf-8

"""
    Altana Atlas API

    Altana Atlas for Regulatory Risk and Trade Compliance  # noqa: E501

    OpenAPI spec version: v2.0.0-8
    Contact: engineering@altanatech.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.base_node import BaseNode  # noqa: F401,E501

class FacilityNode(BaseNode):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'address_canon_id': 'str',
        'address_centroid_geojson': 'CentroidGeoJson',
        'address_node_name': 'str',
        'facility_canon_id': 'str',
        'facility_type': 'list[str]',
        'sources': 'list[str]'
    }
    if hasattr(BaseNode, "swagger_types"):
        swagger_types.update(BaseNode.swagger_types)

    attribute_map = {
        'address_canon_id': 'address_canon_id',
        'address_centroid_geojson': 'address_centroid_geojson',
        'address_node_name': 'address_node_name',
        'facility_canon_id': 'facility_canon_id',
        'facility_type': 'facility_type',
        'sources': 'sources'
    }
    if hasattr(BaseNode, "attribute_map"):
        attribute_map.update(BaseNode.attribute_map)

    def __init__(self, address_canon_id=None, address_centroid_geojson=None, address_node_name=None, facility_canon_id=None, facility_type=None, sources=None, *args, **kwargs):  # noqa: E501
        """FacilityNode - a model defined in Swagger"""  # noqa: E501
        self._address_canon_id = None
        self._address_centroid_geojson = None
        self._address_node_name = None
        self._facility_canon_id = None
        self._facility_type = None
        self._sources = None
        self.discriminator = None
        if address_canon_id is not None:
            self.address_canon_id = address_canon_id
        if address_centroid_geojson is not None:
            self.address_centroid_geojson = address_centroid_geojson
        if address_node_name is not None:
            self.address_node_name = address_node_name
        if facility_canon_id is not None:
            self.facility_canon_id = facility_canon_id
        if facility_type is not None:
            self.facility_type = facility_type
        if sources is not None:
            self.sources = sources
        BaseNode.__init__(self, *args, **kwargs)

    @property
    def address_canon_id(self):
        """Gets the address_canon_id of this FacilityNode.  # noqa: E501

        A unique identifier for an address node  # noqa: E501

        :return: The address_canon_id of this FacilityNode.  # noqa: E501
        :rtype: str
        """
        return self._address_canon_id

    @address_canon_id.setter
    def address_canon_id(self, address_canon_id):
        """Sets the address_canon_id of this FacilityNode.

        A unique identifier for an address node  # noqa: E501

        :param address_canon_id: The address_canon_id of this FacilityNode.  # noqa: E501
        :type: str
        """

        self._address_canon_id = address_canon_id

    @property
    def address_centroid_geojson(self):
        """Gets the address_centroid_geojson of this FacilityNode.  # noqa: E501


        :return: The address_centroid_geojson of this FacilityNode.  # noqa: E501
        :rtype: CentroidGeoJson
        """
        return self._address_centroid_geojson

    @address_centroid_geojson.setter
    def address_centroid_geojson(self, address_centroid_geojson):
        """Sets the address_centroid_geojson of this FacilityNode.


        :param address_centroid_geojson: The address_centroid_geojson of this FacilityNode.  # noqa: E501
        :type: CentroidGeoJson
        """

        self._address_centroid_geojson = address_centroid_geojson

    @property
    def address_node_name(self):
        """Gets the address_node_name of this FacilityNode.  # noqa: E501

        The canonical address represented by the node  # noqa: E501

        :return: The address_node_name of this FacilityNode.  # noqa: E501
        :rtype: str
        """
        return self._address_node_name

    @address_node_name.setter
    def address_node_name(self, address_node_name):
        """Sets the address_node_name of this FacilityNode.

        The canonical address represented by the node  # noqa: E501

        :param address_node_name: The address_node_name of this FacilityNode.  # noqa: E501
        :type: str
        """

        self._address_node_name = address_node_name

    @property
    def facility_canon_id(self):
        """Gets the facility_canon_id of this FacilityNode.  # noqa: E501

        A unique identifier for a facility node  # noqa: E501

        :return: The facility_canon_id of this FacilityNode.  # noqa: E501
        :rtype: str
        """
        return self._facility_canon_id

    @facility_canon_id.setter
    def facility_canon_id(self, facility_canon_id):
        """Sets the facility_canon_id of this FacilityNode.

        A unique identifier for a facility node  # noqa: E501

        :param facility_canon_id: The facility_canon_id of this FacilityNode.  # noqa: E501
        :type: str
        """

        self._facility_canon_id = facility_canon_id

    @property
    def facility_type(self):
        """Gets the facility_type of this FacilityNode.  # noqa: E501

        The type of facility (e.g. Operational)  # noqa: E501

        :return: The facility_type of this FacilityNode.  # noqa: E501
        :rtype: list[str]
        """
        return self._facility_type

    @facility_type.setter
    def facility_type(self, facility_type):
        """Sets the facility_type of this FacilityNode.

        The type of facility (e.g. Operational)  # noqa: E501

        :param facility_type: The facility_type of this FacilityNode.  # noqa: E501
        :type: list[str]
        """

        self._facility_type = facility_type

    @property
    def sources(self):
        """Gets the sources of this FacilityNode.  # noqa: E501

        A list of data sources for the information  # noqa: E501

        :return: The sources of this FacilityNode.  # noqa: E501
        :rtype: list[str]
        """
        return self._sources

    @sources.setter
    def sources(self, sources):
        """Sets the sources of this FacilityNode.

        A list of data sources for the information  # noqa: E501

        :param sources: The sources of this FacilityNode.  # noqa: E501
        :type: list[str]
        """

        self._sources = sources

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FacilityNode, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FacilityNode):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
