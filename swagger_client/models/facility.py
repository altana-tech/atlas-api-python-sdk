# coding: utf-8

"""
    Altana Atlas API

    Altana Atlas for Regulatory Risk and Trade Compliance  # noqa: E501

    OpenAPI spec version: {{ version or \"v0.0.1\" }}
    Contact: engineering@altanatech.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Facility(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'facility_canon_id': 'str',
        'company_canon_id': 'str',
        'company_name': 'str',
        'hs_received': 'list[str]',
        'hs_sent': 'list[str]',
        'hs_traded': 'list[str]',
        'receives_from_facility_ids': 'list[str]',
        'sends_to_facility_ids': 'list[str]',
        'address': 'str',
        'coordinates': 'Coordinates',
        'restrictions': 'list[Restriction]',
        'industries': 'list[str]',
        'number_records': 'int',
        'data_sources': 'list[str]',
        'products_sent': 'list[str]',
        'products_received': 'list[str]'
    }

    attribute_map = {
        'facility_canon_id': 'facility_canon_id',
        'company_canon_id': 'company_canon_id',
        'company_name': 'company_name',
        'hs_received': 'hs_received',
        'hs_sent': 'hs_sent',
        'hs_traded': 'hs_traded',
        'receives_from_facility_ids': 'receives_from_facility_ids',
        'sends_to_facility_ids': 'sends_to_facility_ids',
        'address': 'address',
        'coordinates': 'coordinates',
        'restrictions': 'restrictions',
        'industries': 'industries',
        'number_records': 'number_records',
        'data_sources': 'data_sources',
        'products_sent': 'products_sent',
        'products_received': 'products_received'
    }

    def __init__(self, facility_canon_id=None, company_canon_id=None, company_name=None, hs_received=None, hs_sent=None, hs_traded=None, receives_from_facility_ids=None, sends_to_facility_ids=None, address=None, coordinates=None, restrictions=None, industries=None, number_records=None, data_sources=None, products_sent=None, products_received=None):  # noqa: E501
        """Facility - a model defined in Swagger"""  # noqa: E501
        self._facility_canon_id = None
        self._company_canon_id = None
        self._company_name = None
        self._hs_received = None
        self._hs_sent = None
        self._hs_traded = None
        self._receives_from_facility_ids = None
        self._sends_to_facility_ids = None
        self._address = None
        self._coordinates = None
        self._restrictions = None
        self._industries = None
        self._number_records = None
        self._data_sources = None
        self._products_sent = None
        self._products_received = None
        self.discriminator = None
        if facility_canon_id is not None:
            self.facility_canon_id = facility_canon_id
        if company_canon_id is not None:
            self.company_canon_id = company_canon_id
        if company_name is not None:
            self.company_name = company_name
        if hs_received is not None:
            self.hs_received = hs_received
        if hs_sent is not None:
            self.hs_sent = hs_sent
        if hs_traded is not None:
            self.hs_traded = hs_traded
        if receives_from_facility_ids is not None:
            self.receives_from_facility_ids = receives_from_facility_ids
        if sends_to_facility_ids is not None:
            self.sends_to_facility_ids = sends_to_facility_ids
        if address is not None:
            self.address = address
        if coordinates is not None:
            self.coordinates = coordinates
        if restrictions is not None:
            self.restrictions = restrictions
        if industries is not None:
            self.industries = industries
        if number_records is not None:
            self.number_records = number_records
        if data_sources is not None:
            self.data_sources = data_sources
        if products_sent is not None:
            self.products_sent = products_sent
        if products_received is not None:
            self.products_received = products_received

    @property
    def facility_canon_id(self):
        """Gets the facility_canon_id of this Facility.  # noqa: E501

        Altana generated, entity resolved UUID representing a facility  # noqa: E501

        :return: The facility_canon_id of this Facility.  # noqa: E501
        :rtype: str
        """
        return self._facility_canon_id

    @facility_canon_id.setter
    def facility_canon_id(self, facility_canon_id):
        """Sets the facility_canon_id of this Facility.

        Altana generated, entity resolved UUID representing a facility  # noqa: E501

        :param facility_canon_id: The facility_canon_id of this Facility.  # noqa: E501
        :type: str
        """

        self._facility_canon_id = facility_canon_id

    @property
    def company_canon_id(self):
        """Gets the company_canon_id of this Facility.  # noqa: E501

        Altana generated, entity resolved UUID representing a company  # noqa: E501

        :return: The company_canon_id of this Facility.  # noqa: E501
        :rtype: str
        """
        return self._company_canon_id

    @company_canon_id.setter
    def company_canon_id(self, company_canon_id):
        """Sets the company_canon_id of this Facility.

        Altana generated, entity resolved UUID representing a company  # noqa: E501

        :param company_canon_id: The company_canon_id of this Facility.  # noqa: E501
        :type: str
        """

        self._company_canon_id = company_canon_id

    @property
    def company_name(self):
        """Gets the company_name of this Facility.  # noqa: E501

        The resolved company name associated with the company canon ID  # noqa: E501

        :return: The company_name of this Facility.  # noqa: E501
        :rtype: str
        """
        return self._company_name

    @company_name.setter
    def company_name(self, company_name):
        """Sets the company_name of this Facility.

        The resolved company name associated with the company canon ID  # noqa: E501

        :param company_name: The company_name of this Facility.  # noqa: E501
        :type: str
        """

        self._company_name = company_name

    @property
    def hs_received(self):
        """Gets the hs_received of this Facility.  # noqa: E501

        A list of HS codes that the facility has received  # noqa: E501

        :return: The hs_received of this Facility.  # noqa: E501
        :rtype: list[str]
        """
        return self._hs_received

    @hs_received.setter
    def hs_received(self, hs_received):
        """Sets the hs_received of this Facility.

        A list of HS codes that the facility has received  # noqa: E501

        :param hs_received: The hs_received of this Facility.  # noqa: E501
        :type: list[str]
        """

        self._hs_received = hs_received

    @property
    def hs_sent(self):
        """Gets the hs_sent of this Facility.  # noqa: E501

        A list of HS codes that the facility has sent  # noqa: E501

        :return: The hs_sent of this Facility.  # noqa: E501
        :rtype: list[str]
        """
        return self._hs_sent

    @hs_sent.setter
    def hs_sent(self, hs_sent):
        """Sets the hs_sent of this Facility.

        A list of HS codes that the facility has sent  # noqa: E501

        :param hs_sent: The hs_sent of this Facility.  # noqa: E501
        :type: list[str]
        """

        self._hs_sent = hs_sent

    @property
    def hs_traded(self):
        """Gets the hs_traded of this Facility.  # noqa: E501

        A list of HS codes that the facility has traded (i.e. sent and received)  # noqa: E501

        :return: The hs_traded of this Facility.  # noqa: E501
        :rtype: list[str]
        """
        return self._hs_traded

    @hs_traded.setter
    def hs_traded(self, hs_traded):
        """Sets the hs_traded of this Facility.

        A list of HS codes that the facility has traded (i.e. sent and received)  # noqa: E501

        :param hs_traded: The hs_traded of this Facility.  # noqa: E501
        :type: list[str]
        """

        self._hs_traded = hs_traded

    @property
    def receives_from_facility_ids(self):
        """Gets the receives_from_facility_ids of this Facility.  # noqa: E501

        A list of facility IDs that this facility receives products from  # noqa: E501

        :return: The receives_from_facility_ids of this Facility.  # noqa: E501
        :rtype: list[str]
        """
        return self._receives_from_facility_ids

    @receives_from_facility_ids.setter
    def receives_from_facility_ids(self, receives_from_facility_ids):
        """Sets the receives_from_facility_ids of this Facility.

        A list of facility IDs that this facility receives products from  # noqa: E501

        :param receives_from_facility_ids: The receives_from_facility_ids of this Facility.  # noqa: E501
        :type: list[str]
        """

        self._receives_from_facility_ids = receives_from_facility_ids

    @property
    def sends_to_facility_ids(self):
        """Gets the sends_to_facility_ids of this Facility.  # noqa: E501

        A list of facility IDs that this facility sends products to  # noqa: E501

        :return: The sends_to_facility_ids of this Facility.  # noqa: E501
        :rtype: list[str]
        """
        return self._sends_to_facility_ids

    @sends_to_facility_ids.setter
    def sends_to_facility_ids(self, sends_to_facility_ids):
        """Sets the sends_to_facility_ids of this Facility.

        A list of facility IDs that this facility sends products to  # noqa: E501

        :param sends_to_facility_ids: The sends_to_facility_ids of this Facility.  # noqa: E501
        :type: list[str]
        """

        self._sends_to_facility_ids = sends_to_facility_ids

    @property
    def address(self):
        """Gets the address of this Facility.  # noqa: E501

        The address of this facility  # noqa: E501

        :return: The address of this Facility.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this Facility.

        The address of this facility  # noqa: E501

        :param address: The address of this Facility.  # noqa: E501
        :type: str
        """

        self._address = address

    @property
    def coordinates(self):
        """Gets the coordinates of this Facility.  # noqa: E501


        :return: The coordinates of this Facility.  # noqa: E501
        :rtype: Coordinates
        """
        return self._coordinates

    @coordinates.setter
    def coordinates(self, coordinates):
        """Sets the coordinates of this Facility.


        :param coordinates: The coordinates of this Facility.  # noqa: E501
        :type: Coordinates
        """

        self._coordinates = coordinates

    @property
    def restrictions(self):
        """Gets the restrictions of this Facility.  # noqa: E501


        :return: The restrictions of this Facility.  # noqa: E501
        :rtype: list[Restriction]
        """
        return self._restrictions

    @restrictions.setter
    def restrictions(self, restrictions):
        """Sets the restrictions of this Facility.


        :param restrictions: The restrictions of this Facility.  # noqa: E501
        :type: list[Restriction]
        """

        self._restrictions = restrictions

    @property
    def industries(self):
        """Gets the industries of this Facility.  # noqa: E501

        A list of industries defined by Altana taxonomy  # noqa: E501

        :return: The industries of this Facility.  # noqa: E501
        :rtype: list[str]
        """
        return self._industries

    @industries.setter
    def industries(self, industries):
        """Sets the industries of this Facility.

        A list of industries defined by Altana taxonomy  # noqa: E501

        :param industries: The industries of this Facility.  # noqa: E501
        :type: list[str]
        """

        self._industries = industries

    @property
    def number_records(self):
        """Gets the number_records of this Facility.  # noqa: E501

        Number of transaction records associated with this facility  # noqa: E501

        :return: The number_records of this Facility.  # noqa: E501
        :rtype: int
        """
        return self._number_records

    @number_records.setter
    def number_records(self, number_records):
        """Sets the number_records of this Facility.

        Number of transaction records associated with this facility  # noqa: E501

        :param number_records: The number_records of this Facility.  # noqa: E501
        :type: int
        """

        self._number_records = number_records

    @property
    def data_sources(self):
        """Gets the data_sources of this Facility.  # noqa: E501


        :return: The data_sources of this Facility.  # noqa: E501
        :rtype: list[str]
        """
        return self._data_sources

    @data_sources.setter
    def data_sources(self, data_sources):
        """Sets the data_sources of this Facility.


        :param data_sources: The data_sources of this Facility.  # noqa: E501
        :type: list[str]
        """

        self._data_sources = data_sources

    @property
    def products_sent(self):
        """Gets the products_sent of this Facility.  # noqa: E501

        A list of product IDs that a facility sends  # noqa: E501

        :return: The products_sent of this Facility.  # noqa: E501
        :rtype: list[str]
        """
        return self._products_sent

    @products_sent.setter
    def products_sent(self, products_sent):
        """Sets the products_sent of this Facility.

        A list of product IDs that a facility sends  # noqa: E501

        :param products_sent: The products_sent of this Facility.  # noqa: E501
        :type: list[str]
        """

        self._products_sent = products_sent

    @property
    def products_received(self):
        """Gets the products_received of this Facility.  # noqa: E501

        A list of product IDs that a facility receives  # noqa: E501

        :return: The products_received of this Facility.  # noqa: E501
        :rtype: list[str]
        """
        return self._products_received

    @products_received.setter
    def products_received(self, products_received):
        """Sets the products_received of this Facility.

        A list of product IDs that a facility receives  # noqa: E501

        :param products_received: The products_received of this Facility.  # noqa: E501
        :type: list[str]
        """

        self._products_received = products_received

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Facility, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Facility):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
