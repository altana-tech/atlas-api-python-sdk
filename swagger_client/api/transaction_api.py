# coding: utf-8

"""
    Altana Atlas API

    Altana Atlas for Regulatory Risk and Trade Compliance  # noqa: E501

    OpenAPI spec version: {{ version or \"v0.0.1\" }}
    Contact: engineering@altanatech.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class TransactionApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def transaction_risk(self, **kwargs):  # noqa: E501
        """Transaction Risk  # noqa: E501

        The Transaction Risk endpoint takes in details from a shipping transaction (i.e., a customs declaration, manifest, bill of lading, etc.) in a standard json format and returns an array of risks associated with that transaction.  The base risks that Altana returns currently in this endpoint include security risk, narcotics risk, and money laundering risk.  The risks are returned in an array to allow easy extensibility.  More risks calibrated to the country at hand, such as fiscal (tax evasion) risks, supervised models trained on enforcement results, and anomaly detection models, are easily added without breaking integrations.  The minimum required input fields for this endpoint are \"goods_description,\" \"hs_code,\" and the countries of origin and destination (ISO-2 codes).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.transaction_risk(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TransactionRecord body: Cross-Border Transaction Records
        :return: TransactionRisk
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.transaction_risk_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.transaction_risk_with_http_info(**kwargs)  # noqa: E501
            return data

    def transaction_risk_with_http_info(self, **kwargs):  # noqa: E501
        """Transaction Risk  # noqa: E501

        The Transaction Risk endpoint takes in details from a shipping transaction (i.e., a customs declaration, manifest, bill of lading, etc.) in a standard json format and returns an array of risks associated with that transaction.  The base risks that Altana returns currently in this endpoint include security risk, narcotics risk, and money laundering risk.  The risks are returned in an array to allow easy extensibility.  More risks calibrated to the country at hand, such as fiscal (tax evasion) risks, supervised models trained on enforcement results, and anomaly detection models, are easily added without breaking integrations.  The minimum required input fields for this endpoint are \"goods_description,\" \"hs_code,\" and the countries of origin and destination (ISO-2 codes).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.transaction_risk_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TransactionRecord body: Cross-Border Transaction Records
        :return: TransactionRisk
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method transaction_risk" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/transaction/risk', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TransactionRisk',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
