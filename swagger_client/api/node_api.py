# coding: utf-8

"""
    Altana Atlas API

    Altana Atlas for Regulatory Risk and Trade Compliance  # noqa: E501

    OpenAPI spec version: v2.0.0-8
    Contact: engineering@altanatech.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class NodeApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def describe_node(self, node_type, **kwargs):  # noqa: E501
        """describe_node  # noqa: E501

        Returns a description of the fields  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.describe_node(node_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str node_type: The type of node being requested (required)
        :return: FieldDescriptions
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.describe_node_with_http_info(node_type, **kwargs)  # noqa: E501
        else:
            (data) = self.describe_node_with_http_info(node_type, **kwargs)  # noqa: E501
            return data

    def describe_node_with_http_info(self, node_type, **kwargs):  # noqa: E501
        """describe_node  # noqa: E501

        Returns a description of the fields  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.describe_node_with_http_info(node_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str node_type: The type of node being requested (required)
        :return: FieldDescriptions
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['node_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method describe_node" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'node_type' is set
        if ('node_type' not in params or
                params['node_type'] is None):
            raise ValueError("Missing the required parameter `node_type` when calling `describe_node`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'node_type' in params:
            path_params['node_type'] = params['node_type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/{node_type}/describe', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FieldDescriptions',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_node_by_id(self, node_type, node_id, **kwargs):  # noqa: E501
        """get_node_by_id  # noqa: E501

        Get a node by its ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_node_by_id(node_type, node_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str node_type: The type of node being requested (required)
        :param str node_id: The ID of the node (required)
        :return: Node
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_node_by_id_with_http_info(node_type, node_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_node_by_id_with_http_info(node_type, node_id, **kwargs)  # noqa: E501
            return data

    def get_node_by_id_with_http_info(self, node_type, node_id, **kwargs):  # noqa: E501
        """get_node_by_id  # noqa: E501

        Get a node by its ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_node_by_id_with_http_info(node_type, node_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str node_type: The type of node being requested (required)
        :param str node_id: The ID of the node (required)
        :return: Node
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['node_type', 'node_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_node_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'node_type' is set
        if ('node_type' not in params or
                params['node_type'] is None):
            raise ValueError("Missing the required parameter `node_type` when calling `get_node_by_id`")  # noqa: E501
        # verify the required parameter 'node_id' is set
        if ('node_id' not in params or
                params['node_id'] is None):
            raise ValueError("Missing the required parameter `node_id` when calling `get_node_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'node_type' in params:
            path_params['node_type'] = params['node_type']  # noqa: E501
        if 'node_id' in params:
            path_params['node_id'] = params['node_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/{node_type}/id/{node_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Node',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
